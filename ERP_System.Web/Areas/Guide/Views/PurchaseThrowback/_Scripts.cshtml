
<script>
	const getRowsNumber = () => {

		let allTableRows = document.querySelectorAll("#InvoiceProductsBody tr")
		if (document.getElementById('ProductsCount')) {
			document.getElementById('ProductsCount').innerText = allTableRows.length
		}
	}
	getRowsNumber();

	$(document).ready(function () {
		LoadTable();
	});

	let form = $('#frm');
	function Submit(type, isPrint) {
		event.preventDefault();
		Save(type, isPrint);

	}

	function handlePrintDiv() {
		var InvoiceId = $('#id').val();
		$.get('@Url.GetAction("GetInvoiceToPrint")', { invoiceId: InvoiceId }, function (res) {
			if (res.Data) {
				var data = res.Data;
				printParchaseThrowback(data);
			}
		});
	}

	function handleGetPurchaseInvoice() {
		var pInvoiceNumber = $('#PurchaseInvoiceNo');
		var pInvoiceDate = $('#PInvoiceDate');
		var pInvoiceId = $('#PurchaseInvoiceId');
		var $preloader = $('#loader');
		if (pInvoiceNumber.val() == '') {
			$('#SaleInvoiceId').val('0');
			$('#SaleInvoiceNo').focus();
			Swal.fire({
				title: 'من فضلك أدخل رقم فاتورة المشتريات',
				timer: 2000,
				timerProgressBar: true,
				icon: 'warning',
				showConfirmButton: false
			});
		} 
		// else if (pInvoiceDate.val() == '') {
		//	$('#PInvoiceDate').val('');
		//	$('#PInvoiceDate').focus();
		//	Swal.fire({
		//		title: 'من فضلك أدخل تاريخ فاتورة المشتريات',
		//		timer: 2000,
		//		timerProgressBar: true,
		//		icon: 'warning',
		//		showConfirmButton: false
		//	});
		//}
		else {
			$preloader.fadeIn('slow');
			$.get('@Url.GetAction("GetPurchaseInvoiceDetail")', { invoiceNumber: pInvoiceNumber.val(), invoiceDate: pInvoiceDate.val() }, function (res) {
				$preloader.fadeOut('slow');
				if (res.Status) {
					if (res.Data) {
						let data = res.Data;
						pInvoiceId.val(data.ID);
						pInvoiceNumber.val(data.InvoiceNumber);
						pInvoiceDate.val(data.InvoiceDateStr);
						FillInvoice(data);
					} else {
						Swal.fire({
							title: 'لا توجد فاتورة بهذا الرقم والتاريخ',
							timer: 2000,
							timerProgressBar: true,
							icon: 'warning',
							showConfirmButton: false
						});
					}
				} else {
					Swal.fire({
						title: `${res.Message}`,
						timer: 2000,
						timerProgressBar: true,
						icon: 'warning',
						showConfirmButton: false
					});
				}
			});
		}
	}
	function FillInvoice(obj) {
		var invoiceProducts = obj.GetInvoiceDetails;
		var transactionType = $('#ddlTransactionType');
		var stockId = $('#ddlStockId');
		var supplier = $('#ddlSupplierId');
		var InvoiceTotalPrice = $('.InvoiceTotalPrice');
		var TotalPaid = $('.TotalPaid');
		var productsTable = $('#InvoiceProductsBody');
		transactionType.val(obj.TransactionType).trigger('change');
		stockId.empty();
		stockId.append(`<option selected value="${obj.StockId}" >${obj.StockName}</option>`)
		supplier.val(obj.SupplierId).trigger('change');

		transactionType.attr('disabled', 'disabled');
		stockId.attr('disabled', 'disabled');
		supplier.attr('disabled', 'disabled');
		InvoiceTotalPrice.val(obj.InvoiceTotalPrice);
		//TotalPaid.val(obj.TotalPaid)

		if (invoiceProducts != null && invoiceProducts.length > 0) {
			productsTable.empty();
			invoiceProducts.forEach(function (item) {
				InvoiceProductsAddNew({
					"id": "0", "ProductId": item.ProductId,
					"ProductBarCode": item.ProductBarCode, "ProductName": item.ProductName
					, "UnitId": item.UnitId, "ConversionFactor": item.ConversionFactor, "QtyInStock": item.QtyInStockStr, "PurchaseDetailId": item.ID, "UnitName": item.UnitName, "Qty": item.Qty, "TotalQtyPrice": item.TotalQtyPrice, "PurchasingPrice": item.PurchasingPrice
				}, false);

			})
		} else {
			InvoiceProductsAddNew({
				"id": "0", "ProductId": "0",
				"ProductBarCode": "", "ProductName": ""
				, "UnitId": "0", "ConversionFactor": "", "Qty": "", "QtyInStock": "", "PurchasingPrice": "", "TotalQtyPrice": ""
			}, true);
		}
	}
	function LoadTable() {
		$('#tbl').DataTable().destroy();

		dt = $('#tbl').DataTable({
			"columnDefs": [{ "defaultContent": "-", "targets": "_all" }],

			"language": _dataTableTranslate,
			pageLength: 10,
			pagijngType: "full_numbers",
			direction: 'rtl',
			serverSide: true,
			scrollX: true,
			processing: true,
			lengthMenu: [10, 25, 50, 75, 100],
			sAjaxSource: '@Url.GetAction("LoadDataTable")',
			sServerMethod: "POST",
			bPaginate: true,
			paging: true,
			dom: 'Blfrtip',
			buttons: [


			],
			search: {},
			columns: [

				{
					data: null,
					bSortable: true,
					render: function (data, type, row) { return '<label class="InvoiceNumber">' + (data.InvoiceNumber ?? "") + '</label><input hidden name="InvoiceID" class="InvoiceID" value="' + data.ID + '" /> ' }

				},
				{
					data: null,
					bSortable: true,
					render: function (data, type, row) { return '<label class="StockName">' + (data.StockName ?? "") + '</label><input hidden name="StockId" class="StockId" value="' + data.StockId + '" /> ' }

				},
				{
					data: null,
					bSortable: true,
					render: function (data, type, row) {
						return '<label class="InvoiceDate">' + (data.InvoiceDate ?? "") + '</label><input hidden name="InvoiceDate" class="InvoiceDate" value="' + data.InvoiceDate + '" /> '
					}

				},
				{
					data: null,
					bSortable: true,
					render: function (data, type, row) { return '<label class="SupplierName">' + (data.SupplierName ?? "") + '</label><input hidden name="SupplierId" class="SupplierId" value="' + data.SupplierId + '" /> ' }

				},
				{
					data: null,
					bSortable: true,
					render: function (data, type, row) { return '<label class="ProductsCount">' + (data.ProductsCount ?? "") + '</label><input hidden name="ProductsCount" class="ProductsCount" value="' + data.ProductsCount + '" /> ' }

				},
				{
					data: null,
					bSortable: true,
					render: function (data, type, row) { return '<label class="InvoiceTotalPrice">' + (data.InvoiceTotalPrice ?? "") + '</label><input hidden name="InvoiceTotalPrice" class="InvoiceTotalPrice" value="' + data.InvoiceTotalPrice + '" /> ' }

				},
				{
					data: null,
					bSortable: true,
					render: function (data, type, row) { return '<label class="TotalPaid">' + (data.TotalPaid ?? "") + '</label><input hidden name="TotalPaid" class="TotalPaid" value="' + data.TotalPaid + '" /> ' }

				},
				{
					data: null,
					bSortable: true,
					render: function (data, type, row) { return '<label class="AddedDate">' + (data.AddedDate ?? "") + '</label><input hidden name="groupId" class="groupId" value="' + data.AddedDate + '" /> ' }

				},
				{

					data: null,
					bSortable: true,
					render: function (data, type, row) {

						return '<label class="align-center  statesact  ' + ((data.IsActive) ? "IsActive badge bg-success" : "IsDeactivate badge bg-danger") + ' "> <span>' + ((data.IsActive) ? "نشط" : "غير نشط") + '</span></label><input hidden class="isActive" value="' + data.IsActive + '" />'

					}

				},


				{

					data: null,
					bSortable: false,
					render: function (data, type, row) {
						let btn = `<div class="Event">



	@if (CurrentForm.CurrentFormPermissionActions.ShowHasPermission)
	{
																																												<a class="btn-icon btn btn-warning btn-sm"  href="/Guide/PurchaseThrowback/Edit/${data.ID}" >
																																										 <i class="fas fa-eye"></i>

																																								</a>

	}

	@if (CurrentForm.CurrentFormPermissionActions.DeleteHasPermission)
	{
																																										   <a class="btn-icon btn btn-danger btn-sm" onclick="Delete(this,'${data.ID}')" href="javascript:void(0)">
																																							   <i class="fas fa-trash-alt"></i>

																																							   </a>
	}
																						   `;
						return btn + '</div>';
					}
				}
			]
		});

	}
	function resetForm(stockId, invoiceType) {
		$('#id').val('');
		var invoiceDate = $('#InvoiceDate').val();
		$('#ddlInvoiceType').val('0');

		$('#ddlStockId').val(stockId).trigger('change');
		$('#ddlSupplierId').val('0').trigger('change');
		$('.SupplierData').empty();
		$('.TotalPaid').val('0');

		$('#PurchaseInvoiceNo').val('');
		$('#PurchaseInvoiceId').val('0');
		$('.InvoiceTotalPrice').val('0');
		$('#PurchaseInvoiceNo').removeAttr("disabled");
		$('#PInvoiceDate').removeAttr("disabled");
		$('#ddlTransactionType').removeAttr("disabled");
		$('#ddlStockId').removeAttr("disabled");
		$('#ddlSupplierId').removeAttr("disabled");

		$('#InvoiceProductsBody').empty();
		InvoiceProductsAddNew({
			"id": "0", "ProductId": "0",
			"ProductBarCode": "", "ProductName": ""
			, "UnitId": "0", "ConversionFactor": "", "Qty": "", "QtyInStock": "", "PurchasingPrice": "", "TotalQtyPrice": ""
		}, true);
		$("#ProductsCount").text('0')
		$('#IsActive').val('true');
		$('#IsActive').prop('checked', true);
		getRowsNumber()
	}
	function CancelProcess() {
		Swal.fire({
			title: 'إلغاء العملية؟',
			text: "هل انت متاكد من إلغاء العملية",
			icon: 'warning',
			showCancelButton: true,
			confirmButtonColor: '#3085d6',
			cancelButtonColor: '#d33',
			cancelButtonText: 'لا',
			confirmButtonText: 'نعم!'
		}).then((result) => {
			if (result.isConfirmed) {
				let stockId = document.querySelector("#ddlStockId").value;
				resetForm(stockId, '0');
			}

		})
	}
	function GetLastInvoiceNumberByDate(date) {
		$.get('@Url.GetAction("GetLastInvoiceNumberByDate")', { date: date }, function (res) {
			if (res) {
				var invoiceNumber = res + 1;
				$('#InvoiceNumber').val(invoiceNumber);
			} else {
				$('#InvoiceNumber').val('1');
			}

		});
	}
	function FinishShift() {
		Swal.fire({
			title: 'إلغاء الخدمة؟',
			text: "هل انت متاكد من إلغاء الخدمة",
			icon: 'warning',
			showCancelButton: true,
			confirmButtonColor: '#3085d6',
			cancelButtonColor: '#d33',
			cancelButtonText: 'لا',
			confirmButtonText: 'نعم!'
		}).then((result) => {
			if (result.isConfirmed) {

				window.location.href = "/Account/LogOff";
			}
		})

	}
	function RefreshSuppliers() {
		$.get('@Url.GetAction("GetSuppliersSelect")', function (res) {
			if (res) {
				$('#ddlSupplierId').empty();
				$('#ddlSupplierId').append('<option selected value="0">اختر المورد</option>');
				for (i = 0; i < res.length; i++) {
					$('#ddlSupplierId').append('<option value="' + res[i].Value + '">' + res[i].Text + '</option>');
				}
			}
		});
	}
	function getProduct(value, event) {
		if (event.keyCode === 13) {

			var barcode = value.value;

			var PurchaseInvoiceId = $('#PurchaseInvoiceId').val();
			if (PurchaseInvoiceId === '' || PurchaseInvoiceId == '0' || PurchaseInvoiceId == null) {
				Swal.fire({
					title: 'من فضلك حدد الفاتورة المراد البحث في منتجاتها',
					timer: 1500,
					timerProgressBar: true,
					icon: 'warning',
					showConfirmButton: false
				});
			} else {

				let tBody = $(value).parent().parent();
				let ID = tBody.find(".ID");
				let ProductId = tBody.find(".ProductId");
				let ProductBarCode = tBody.find(".ProductBarCode");
				let ProductName = tBody.find(".ProductName");
				let UnitId = tBody.find(".UnitId");
				let ConversionFactor = tBody.find(".ConversionFactor");
				let PurchaseDetailId = tBody.find(".PurchaseDetailId");
				let Qty = tBody.find(".Qty");
				let QtyInStock = tBody.find(".QtyInStock");
				let PurchasingPrice = tBody.find(".PurchasingPrice");
				let TotalQtyPrice = tBody.find(".TotalQtyPrice");
				$.get('@Url.GetAction("GetProductByBarCodeAndInvoiceId")', { text: barcode, purchaseInvoiceId: PurchaseInvoiceId }, function (res) {
					if (res.Status) {
						let data = res.Data;

						let productExist = false;
						let firstRowBarCode = $("#InvoiceProductsBody >tr:first-child").find('.ProductBarCode');

						$.each($("#InvoiceProductsBody >tr"), function (key, value) {
							let IdF = $(value).children("td").children(".ID").val().trim();
							let ID = IdF == '0' ? null : IdF,
								ProductId = $(value).children("td").children(".ProductId").val().trim(),
								ProductBarCode2 = $(value).children("td").children(".ProductBarCode").val().trim(),
								ProductName2 = $(value).children("td").children(".ProductName").val().trim(),
								UnitId = $(value).children("td").children(".UnitId").val().trim(),
								PurchaseDetailId = $(value).children("td").children(".PurchaseDetailId").val().trim(),
								ConversionFactor = $(value).children("td").children(".ConversionFactor").val().trim(),
								Qty = $(value).children("td").children(".Qty").val().trim(),
								PurchasingPrice = $(value).children("td").children(".PurchasingPrice").val().trim(),
								TotalQtyPrice = $(value).children("td").children(".TotalQtyPrice").val().trim();
							
							if ((UnitId === data.UnitId && ProductId == data.ProductId) || (ProductBarCode2 === data.ProductBarCode && ProductId == data.ProductId)) {
								if (Qty < (data.Qty - data.ThrowbackQty)) {
									let newQty = parseInt(Qty);
									$(value).children("td").children(".Qty").val(newQty + 1);
									ProductName.val('');
									ProductBarCode.val('');
									getInvoiceTotalPrice(firstRowBarCode);
								} else {
									Swal.fire({
										title: 'الكمية موجودة بالكامل',
										timer: 1500,
										timerProgressBar: true,
										icon: 'warning',
										showConfirmButton: false
									});
								}
								productExist = true;
							}
						});

						if (!productExist) {						
							ID.val('0');
							ProductId.val(data.ProductId);
							PurchaseDetailId.val(data.PurchaseDetailId);
							ProductBarCode.val(data.ProductBarCode);
							ProductBarCode.attr('disabled','disabled');
							ProductName.val(data.ProductName);
							ProductName.attr('disabled', 'disabled');
							UnitId.empty();
							UnitId.attr('disabled', 'disabled');
							UnitId.append(`<option selected value"${data.UnitId}">${data.UnitName}</option>`);
							ConversionFactor.val(data.ConversionFactor);
							QtyInStock.val(data.QtyInStockStr);
							QtyInStock.attr('disabled','disabled');
							Qty.val(data.Qty);
							PurchasingPrice.val(data.PurchasingPrice);
							PurchasingPrice.attr('disabled', 'disabled');
							TotalQtyPrice.val(data.TotalQtyPrice);
							TotalQtyPrice.attr('disabled', 'disabled');

					
						} 
						//else {
						//	Swal.fire({
						//		title: 'هذا المنتج موجود بالفعل',
						//		timer: 1500,
						//		timerProgressBar: true,
						//		icon: 'warning',
						//		showConfirmButton: false
						//	});
						//}

					} else {
						Swal.fire({
							title: `${res.Message}`,
							timer: 2000,
							timerProgressBar: true,
							icon: 'warning',
							showConfirmButton: false
						});
					}
				});
			}


		}
		getRowsNumber()
	}
	function handleUnitChange(value, event) {
		let tBody = $(value).parent().parent();
		let ProductBarCode = tBody.find(".ProductBarCode");
		let ProductId = tBody.find(".ProductId");
		let ID = tBody.find(".ID");
		let ProductName = tBody.find(".ProductName");
		var unitId = value.value;
		let UnitId = tBody.find(".UnitId");
		let Qty = tBody.find(".Qty");
		let ConversionFactor = tBody.find(".ConversionFactor");
		let PurchasingPrice = tBody.find(".PurchasingPrice");
		//let QtyInStock = tBody.find(".QtyInStock");
		let TotalQtyPrice = tBody.find(".TotalQtyPrice");
		$.get('@Url.GetAction("GetProductDataByUnitId")', { unitId: unitId, productId: ProductId.val() }, function (res) {
			if (res.Status) {
				let data = res.Data;
				ProductId.val(data.ID);
				ProductBarCode.val(data.BarCodeText);
				ProductName.val(data.Name);
				UnitId.empty();
				ConversionFactor.val(data.ConversionFactor);
				data.GetProductUnits.forEach(function (item) {
					if (item.UnitId === data.IdUnitOfQty) {
						UnitId.append(`<option selected value="${item.UnitId}">${item.UnitName}</option>`);
						PurchasingPrice.val(item.PurchasingPrice);
					}
					else {
						UnitId.append(`<option value="${item.UnitId}">${item.UnitName}</option>`);
					}

				});
				var oldQty = Qty.val();
				if (oldQty === '') {
					Qty.val('1');
				} else {
					Qty.val(oldQty);
				}
				let TQP = 1 * PurchasingPrice.val();
				TotalQtyPrice.val(TQP);
				getInvoiceTotalPrice(ProductBarCode);
				//barCodeBtn.attr("href", data.BarCodePath);
			} else {
				Swal.fire({
					title: `${res.Message}`,
					timer: 2000,
					timerProgressBar: true,
					icon: 'warning',
					showConfirmButton: false
				});
			}
		});
	}
	function getInvoiceTotalPrice(value) {
		var TPrice = 0;
		let tRow = $(value).parent().parent();
		let PurchasingPrice = tRow.find(".PurchasingPrice").val().trim();
		let ConversionFactor = tRow.find(".ConversionFactor").val().trim();
		let Qty = tRow.find(".Qty").val().trim();
		let TotalQtyPrice = tRow.find(".TotalQtyPrice");

		let CurrentRowPrice = Qty * PurchasingPrice;

		let InvoiceTotalPrice = tRow.parent().parent().parent().parent().parent().parent().find(".InvoiceTotalPrice");

		TotalQtyPrice.val(CurrentRowPrice);

		$.each($("#InvoiceProductsBody >tr"), function (key, value) {
			let IdF = $(value).children("td").children(".ID").val().trim();
			ConversionFactor = $(value).children("td").children(".ConversionFactor").val().trim(),
				Qty = $(value).children("td").children(".Qty").val().trim(),
				PurchasingPrice = $(value).children("td").children(".PurchasingPrice").val().trim(),
				TPrice += Qty * PurchasingPrice;
		});
		InvoiceTotalPrice.val(TPrice);
	}
	function Save(type, isPrint) {
		let stockId = document.querySelector("#ddlStockId").value;
		let Products = [];
		$.each($("#InvoiceProductsBody >tr"), function (key, value) {
			let IdF = $(value).children("td").children(".ID").val().trim();
			let ID = IdF == '0' ? null : IdF,
				ProductId = $(value).children("td").children(".ProductId").val().trim(),
				ProductBarCode = $(value).children("td").children(".ProductBarCode").val().trim(),
				ProductName = $(value).children("td").children(".ProductName").val().trim(),
				UnitId = $(value).children("td").children(".UnitId").val().trim(),
				PurchaseDetailId = $(value).children("td").children(".PurchaseDetailId").val().trim(),
				ConversionFactor = $(value).children("td").children(".ConversionFactor").val().trim(),
				Qty = $(value).children("td").children(".Qty").val().trim(),
				PurchasingPrice = $(value).children("td").children(".PurchasingPrice").val().trim(),
				TotalQtyPrice = $(value).children("td").children(".TotalQtyPrice").val().trim();
			if (UnitId !== '0') {
				Products.push({
					ID: ID, ProductId: ProductId, ProductBarCode: ProductBarCode, ProductName: ProductName,
					UnitId: UnitId, ConversionFactor: ConversionFactor, Qty: Qty, PurchasingPrice: PurchasingPrice
					, TotalQtyPrice: TotalQtyPrice, PurchaseDetailId: PurchaseDetailId
				});
			}
			getRowsNumber();
		});
		if ($('#PurchaseInvoiceNo').val() == '' || $('#PurchaseInvoiceId').val() == '') {
			Swal.fire({
				title: `من فضلك قم بالبحث عن الفاتورة المراد عمل مرتجع لها`,
				timer: 3000,
				timerProgressBar: true,
				icon: 'warning',
				showConfirmButton: false
			});
		} else if ($('#ddlStockId').val() == '0') {
			Swal.fire({
				title: `من فضلك اختر المخزن`,
				timer: 2000,
				timerProgressBar: true,
				icon: 'warning',
				showConfirmButton: false
			});
		}
		else if (Products.length <= 0) {
			Swal.fire({
				title: `من فضلك أدخل بيانات المنتجات`,
				timer: 2000,
				timerProgressBar: true,
				icon: 'warning',
				showConfirmButton: false
			});
			getRowsNumber()
		}
		else {
			let stockId = document.querySelector("#ddlStockId").value;
			let invoiceType = document.querySelector("#ddlInvoiceType").value;
			let frm = new FormData();
			frm.append("ID", document.getElementById('id').value);
			frm.append("InvoiceType", document.querySelector("#ddlInvoiceType").value);
			frm.append("StockId", document.querySelector("#ddlStockId").value);
			frm.append("InvoiceNumber", document.querySelector("#InvoiceNumber").value);
			frm.append("PurchaseInvoiceId", document.querySelector("#PurchaseInvoiceId").value);
			frm.append("PurchaseInvoiceDate", document.querySelector("#PInvoiceDate").value);
			frm.append("InvoiceDate", document.querySelector("#InvoiceDate").value);
			frm.append("SupplierId", document.querySelector("#ddlSupplierId").value);
			frm.append("TransactionType", document.querySelector("#ddlTransactionType").value);
			frm.append("InvoiceTotalPrice", document.querySelector(".InvoiceTotalPrice").value);
			frm.append("TotalPaid", document.querySelector(".TotalPaid").value);
			frm.append("InvoiceProductsStr", JSON.stringify(Products));
			var $preloader = $('#loader');
			$preloader.fadeIn('slow');
			$.ajax({
				url: '@Url.GetAction("Save")',
				method: "POST",
				contentType: false,
				processData: false,
				data: frm,
				success: function (res) {
					$preloader.delay(200).fadeOut('slow');
					if (res.Status) {
						Swal.fire({
							title: `${res.Message}`,
							timer: 2000,
							timerProgressBar: true,
							icon: 'success',
							showConfirmButton: false
						}).then((result) => {
							if (type === 'add') {

								resetForm(stockId, '0');
								var invoiceDate = $('#InvoiceDate').val();
								GetLastInvoiceNumberByDate(invoiceDate);

								if (isPrint == 'true') {
									printParchaseThrowback(res.Data);
								}
							} else {
								window.location.href = "/Guide/PurchaseThrowback/Index?previous=true";
							}
						})
					} else {
						Swal.fire({
							title: `${res.Message}`,
							timer: 4000,
							timerProgressBar: true,
							icon: 'error',
							showConfirmButton: false
						})
					}

				},
				error: function (res) {
					$preloader.delay(100).fadeOut('slow');
					Swal.fire({
						title: `${res.Message}`,
						timer: 4000,
						timerProgressBar: true,
						icon: 'error',
						showConfirmButton: false
					})
				}
				//complete: function (res) {
				//    $preloader.delay(200).fadeOut('slow');
				//    console.log(res)
				//    if (res.responseJSON.Status) {
				//        Swal.fire({
				//            title: `${res.responseJSON.Message}`,
				//            timer: 2000,
				//            timerProgressBar: true,
				//            icon: 'success',
				//            showConfirmButton: false
				//        }).then((result) => {
				//            if (type === 'add') {
				//                resetForm(stockId, '0');
				//            } else {
				//            window.location.href = "/Guide/PurchaseThrowback/Index?previous=true";
				//            }
				//        })
				//    } else {
				//        $preloader.delay(100).fadeOut('slow');
				//        Swal.fire({
				//            title: `${res.responseJSON.Message}`,
				//            timer: 4000,
				//            timerProgressBar: true,
				//            icon: 'error',
				//            showConfirmButton: false
				//        })
				//    }
				//}
			});
		}
	}
	function handleChangeSupplier() {
		var supplierId = $('#ddlSupplierId').val();
		$.get('@Url.GetAction("GetSupplierById")', { supplierId: supplierId }, function (res) {
			if (res) {
				let SType = res.ProcessTypeInt;
				var SAmount = res.ProcessAmount;
				if (SType !== null) {
					if (SType === 0) {
						$('.SupplierData').empty();
					} else {
						if (SType == 1) {
							$('.SupplierData').empty();
							$('.SupplierData').append(`
												<input type="text" readonly class="form-control" placeholder="مدين (له )">
													<input type="text" readonly class="form-control" placeholder="${res.ActualAmount}">
											`);

						} else {
							$('.SupplierData').empty();
							$('.SupplierData').append(`
												<input type="text" readonly class="form-control" placeholder="دائن (عليه )">
													<input type="text" readonly class="form-control" placeholder="${res.ActualAmount}">
									`);
						}
					}
				}
			} else {

			}
		});
	}
	function Delete(e, id) {

		var btn = $(e);
		var id = id;
		Swal.fire({
			title: 'هل أنت متأكد؟',
			text: "هل انت متاكد من اجراء العملية",
			icon: 'warning',
			showCancelButton: true,
			confirmButtonColor: '#3085d6',
			cancelButtonColor: '#d33',
			cancelButtonText: 'الغاء',
			confirmButtonText: 'نعم ، حذف!'
		}).then((result) => {
			if (result.isConfirmed) {
				$.post('@Url.GetAction("Delete")', { id: id }, function (res) {
					if (res.Status) {
						Swal.fire({
							title: `تم الحذف`,
							timer: 2000,
							timerProgressBar: true,
							icon: 'success',
							showConfirmButton: false
						}).then(() => {
							LoadTable();
						});
					}
					else {

						Swal.fire({
							title: `خطأ في الحذف`,
							timer: 2000,
							timerProgressBar: true,
							icon: 'warning',
							showConfirmButton: false
						});
					}
				});

			}
		})
		getRowsNumber();
	}

	$("#InvoiceProducts").on("click", ".addInvoiceProduct", function () {
		InvoiceProductsAddNew({
			"id": "0", "ProductId": "0",
			"ProductBarCode": "", "ProductName": ""
			, "UnitId": "0", "ConversionFactor": "", "Qty": "", "QtyInStock": "", "PurchasingPrice": "", "TotalQtyPrice": ""
		}, true);
		getRowsNumber();

	})
	function InvoiceProductsAddNew(obj, isReseted) {
		let rowId = Math.floor(Math.random() * 100000) + 1;
		if (isReseted) {
			$("#InvoiceProductsBody").append(` <tr>

								<td>
											<input class="form-control ID" type="hidden" value="${obj.id}" />
									<input class="form-control ProductId" type="hidden" value="${obj.ProductId}" />
										<input class="form-control PurchaseDetailId" type="hidden" value="${obj.PurchaseDetailId}" />
									<input type="text" onkeyup="getProduct(this,event)" required  value="${obj.ProductBarCode}" id="rowId-${rowId}" class="form-control ProductBarCode" />
								</td>
											<td><input type="text" onkeyup="getProduct(this,event)" required value="${obj.ProductName}" class="form-control ProductName" /></td>
								<td>
										<select class="Select sAddress form-select UnitId" required aria-label="اختر الوحدة" onchange="handleUnitChange(this,event)" name="UnitId" id="ddlUnitId">
										<option selected value="0">اختر الوحدة</option>
									</select>
										<input class="form-control ConversionFactor"  value="${obj.ConversionFactor}" type="hidden" value="1" />
								</td>
											<td><input type="text" disabled class="form-control QtyInStock" value="${obj.QtyInStock}" min="0" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))" /></td>
											<td><input type="number" step="0.01" onchange="getInvoiceTotalPrice(this)" onkeyup="getInvoiceTotalPrice(this)" class="form-control Qty"  value="${obj.Qty}" min="0" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))" /></td>
											<td><input type="number"  step="0.01" onchange="getInvoiceTotalPrice(this)" onkeyup="getInvoiceTotalPrice(this)" min="0"  value="${obj.PurchasingPrice}" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))" required class="form-control PurchasingPrice" /></td>
									<td><input type="number" disabled class="form-control TotalQtyPrice" min="0" value="${obj.TotalQtyPrice}" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))" /></td>
								<td>
									<div class="d-flex">
										<button type="button" class="btn btn-danger btn-icon removeRow mx-1"><i class="fas fa-minus"></i></button>
										<a onclick="doAll(this)" class="btn btn-outline-secondary mx-1" href="#"><i class="fas fa-sharp fa-solid fa-barcode"></i></a>
									</div>
								</td>

							</tr>
								`);
		} else {
			$("#InvoiceProductsBody").append(` <tr>

									<td>
											<input class="form-control ID" type="hidden" value="${obj.id}" />
										<input class="form-control ProductId" type="hidden" value="${obj.ProductId}" />
										<input class="form-control PurchaseDetailId" type="hidden" value="${obj.PurchaseDetailId}" />
										<input type="text" disabled onkeyup="getProduct(this,event)" required  value="${obj.ProductBarCode}" id="rowId-${rowId}" class="form-control ProductBarCode" />
									</td>
												<td><input type="text" disabled onkeyup="getProduct(this,event)" required value="${obj.ProductName}" class="form-control ProductName" /></td>
									<td>
												<select class="Select sAddress form-select UnitId" disabled required aria-label="اختر الوحدة" onchange="handleUnitChange(this,event)" name="UnitId" id="ddlUnitId">
												<option selected value="${obj.UnitId}">${obj.UnitName}</option>
											</select>
											<input class="form-control ConversionFactor"  value="${obj.ConversionFactor}" type="hidden" value="1" />
									</td>
												<td><input type="text" disabled class="form-control QtyInStock" value="${obj.QtyInStock}" min="0" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))" /></td>
												<td><input type="number" step="0.01" onchange="getInvoiceTotalPrice(this)" onkeyup="getInvoiceTotalPrice(this)" class="form-control Qty"  value="${obj.Qty}" min="0" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))" /></td>
													<td><input type="number"  step="0.01" disabled onchange="getInvoiceTotalPrice(this)" onkeyup="getInvoiceTotalPrice(this)" min="0"  value="${obj.PurchasingPrice}" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))" required class="form-control PurchasingPrice" /></td>
										<td><input type="number" disabled class="form-control TotalQtyPrice" min="0" value="${obj.TotalQtyPrice}" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))" /></td>
									<td>
										<div class="d-flex">
											<button type="button" class="btn btn-danger btn-icon removeRow mx-1"><i class="fas fa-minus"></i></button>
											<a onclick="doAll(this)" class="btn btn-outline-secondary mx-1" href="#"><i class="fas fa-sharp fa-solid fa-barcode"></i></a>
										</div>
									</td>

								</tr>
									`);
		}

		getRowsNumber();

	}

	$("#InvoiceProductsBody").on("click", ".removeRow", function () {
		let id = $(this).parent().parent().siblings("td").children(".ProductId").val().trim();
		let btn = $(this);

		if (id != "0" || id != 0) {
			Swal.fire({
				title: 'هل أنت متأكد؟',
				text: "هل انت متاكد من اجراء العملية",
				icon: 'warning',
				showCancelButton: true,
				confirmButtonColor: '#3085d6',
				cancelButtonColor: '#d33',
				cancelButtonText: 'الغاء',
				confirmButtonText: 'نعم ، احذفها!'
			}).then((result) => {
				if (result.isConfirmed) {

					if ($("#InvoiceProductsBody > tr").length > 1) { $(btn).parent().parent().parent().remove(); }
					else {
						$("#InvoiceProductsBody").empty();
						InvoiceProductsAddNew({
							"id": "0", "ProductId": "0",
							"ProductBarCode": "", "ProductName": ""
							, "UnitId": "0", "ConversionFactor": "", "QtyInStock": "", "Qty": "", "PurchasingPrice": "", "TotalQtyPrice": ""
						}, true);
					}
					getInvoiceTotalPriceAfterRemoveRow();
				}
			});
		}
		else {
			if ($("#InvoiceProductsBody > tr").length > 1) { $(btn).parent().parent().parent().remove(); }
			else {
				$("#InvoiceProductsBody").empty();
				InvoiceProductsAddNew({
					"id": "0", "ProductId": "0",
					"ProductBarCode": "", "ProductName": ""
					, "UnitId": "0", "ConversionFactor": "", "QtyInStock": "", "Qty": "", "PurchasingPrice": "", "TotalQtyPrice": ""
				}, true);
			}
		}
		getRowsNumber();

	});

	function getInvoiceTotalPriceAfterRemoveRow() {
		var TPrice = 0;

		$.each($("#InvoiceProductsBody >tr"), function (key, value) {
			let IdF = $(value).children("td").children(".ID").val().trim();
			ConversionFactor = $(value).children("td").children(".ConversionFactor").val().trim(),
				Qty = $(value).children("td").children(".Qty").val().trim(),
				PurchasingPrice = $(value).children("td").children(".PurchasingPrice").val().trim(),
				TPrice += Qty * PurchasingPrice;
		});

		let InvoiceTotalPrice = $('.InvoiceTotalPrice');
		InvoiceTotalPrice.val(TPrice);
	}

	$("#IsActive").change(function (e) {
		var isChecked = $(this).prop("checked");
		$("#IsActive").val(isChecked);
	});


	function doAll(value) {
		if ($(value).parents("tr").find(".ProductBarCode").val() === "" || $(value).parents("tr").find(".UnitId").val() == "0") {
			swal.fire({
				title: `من فضلك أدخل الباركود`,
				timer: 2000,
				timerProgressBar: true,
				icon: 'error',
				showConfirmButton: false
			})
		}
		else {
			var newWin = window.open('', '_blank');
			newWin.document.write('<svg id="barcode"></svg>');
			newWin.focus();
			var element = newWin.document.querySelector('#barcode');
			generateBar(element, $(value).parents("tr").find(".ProductBarCode").val());
		}
	}

	function generateBar(element, value) {
		JsBarcode(element, value, {
			format: 'code128',
			displayValue: true,
			width: 2.8,
			height: 100
		});
	}

	document.onkeydown = function (e) {
		var keyCode = e.keyCode;
		if (keyCode == 113) {
			document.getElementById("withoutPrint").click();
		} if (keyCode == 115) {
			document.getElementById("withPrint").click();
		}
	};
</script>